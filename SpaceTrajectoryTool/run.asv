clear
clc
close all;

%% CONFIG
t_epoch = datetime(2039,1,1);
t_final = t_epoch + days(200);
dt = 86400; % time step in seconds

% Create Enviornment
[solsys, t0, tf] = initializeEnviornment(t_epoch,t_final);
tspan = t0:dt:tf; %create time vector for outer for loop

% Spacecraft Trajectory
spacecraftTraj;

fn_solsys = fieldnames(solsys);
fn_spacecraft = fieldnames(spacecraft);
%% Run Simulation


%create empty rv vectors for each propogatable object
for k = 1:numel(fn_solsys)
    if isfield(solsys.(fn_solsys{k}), "rv0")
        solsys.(fn_solsys{k}).rv = zeros(6,length(tspan));
        solsys.(fn_solsys{k}).rv(:,1) = solsys.(fn_solsys{k}).rv0;
    end
    if isfield(solsys.(fn_solsys{k}), "oe0")
        solsys.(fn_solsys{k}).oe = zeros(6,length(tspan));
        solsys.(fn_solsys{k}).oe(:,1) = solsys.(fn_solsys{k}).oe0;
    end
end

% propogate for each time step
for i = 1:length(tspan)
    %First Propogate Natural Bodies
    for k = 1:numel(fn_solsys)
        % If a solar system field has a state, propogate.
        % Otherwise, do nothing.
        if isfield(solsys.(fn_solsys{k}), "rv0")
            %Extract needed elements from fields
            rv0 = solsys.(fn_solsys{k}).rv0;
            rvi = propogate2body(rv0,solsys.Sun.mu,tspan(i));
            solsys.(fn_solsys{k}).rv(:,i) = rvi;
            if isfield(solsys.(fn_solsys{k}), "oe")
                solsys.(fn_solsys{k}).oe(:,i) = rv2oe(rvi,solsys.Sun.mu);
            end
        end
    end
    % Second, Propogate all spacecraft in the simulation
    for k = 1:numel(fn_spacecraft)
        if isfield(spacecraft.(fn_spacecraft{k}), "rv0")
            rv0 = spacecraft.(fn_spacecraft{k}).rv0;
            rvi = propogate2body(rv0,solsys.Sun.mu,tspan(i));
            spacecraft.(fn_spacecraft{k}).rv(:,i) = rvi;
            if isfield(spacecraft.(fn_spacecraft{k}))
        end
    end
end

%% ANALYSIS

% Plot results
plot_trajectories;
